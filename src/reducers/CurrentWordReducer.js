import {
  ADD_END,
  ADD_START,
  SHUFFLE,
  LOCK_LETTER,
  CHANGE_LETTER,
  REMOVE_LETTER
} from "../actions/types";

export default (
  state = [
    { position: 0, letter: "p", locked: false },
    { position: 1, letter: "l", locked: false },
    { position: 2, letter: "u", locked: false },
    { position: 3, letter: "m", locked: false }
  ],
  action
) => {
  switch (action.type) {
    case ADD_START:
      var newWord = [{ position: 0, letter: "x", locked: false }, ...state];
      for (var i = 0; i < newWord.length; i++) {
        newWord[i].position = i;
      }
      return newWord;

    case ADD_END:
      var newWord = [...state, { position: 0, letter: "x", locked: false }];
      for (var i = 0; i < newWord.length; i++) {
        newWord[i].position = i;
      }
      return newWord;

    case SHUFFLE:
      var newWord = [];
      for (var i = 0; i < state.length; i++) {
        const newLetter =
          allLetters[Math.floor(Math.random() * Math.floor(allLetters.length))];
        if (state[i].locked) {
          newWord.push(state[i]);
        } else {
          newWord.push({ position: i, letter: newLetter, locked: false });
        }
      }
      return newWord;

    case LOCK_LETTER:
      return state.map(letter => {
        if (letter.position === action.payload.position) {
          return action.payload;
        } else {
          return letter;
        }
      });

    // case REMOVE_LETTER:
    //   return state.map(letter => {
    //     if(letter.position !== action.payload) return letter;
    //     // return null;
    //     // return letter;
    //     // console.log(letter.position);
    //     // console.log(action.payload);

    //     // return letter.position !== action.payload;
    //   });

    case REMOVE_LETTER:
      var newWord = state.filter(letter => letter.position !== action.payload);
      for (var i = 0; i < newWord.length; i++) {
        newWord[i].position = i;
      }
      return newWord;

    case CHANGE_LETTER:
      return state.map(letter => {
        if (letter.position === action.payload.position) {
          return action.payload;
        } else {
          return letter;
        }
      });

    default:
      return state;
  }
};

const allLetters = [
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "a",
  "b",
  "b",
  "b",
  "b",
  "b",
  "b",
  "b",
  "b",
  "b",
  "b",
  "b",
  "b",
  "b",
  "b",
  "b",
  "b",
  "b",
  "b",
  "b",
  "b",
  "b",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "c",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "d",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "e",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "f",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "g",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "h",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "i",
  "j",
  "k",
  "k",
  "k",
  "k",
  "k",
  "k",
  "k",
  "k",
  "k",
  "k",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "l",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "m",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "n",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "o",
  "p",
  "p",
  "p",
  "p",
  "p",
  "p",
  "p",
  "p",
  "p",
  "p",
  "p",
  "p",
  "p",
  "p",
  "p",
  "p",
  "p",
  "p",
  "p",
  "p",
  "p",
  "p",
  "p",
  "p",
  "p",
  "q",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "r",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "s",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "t",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "u",
  "v",
  "v",
  "v",
  "v",
  "v",
  "v",
  "v",
  "v",
  "v",
  "v",
  "v",
  "v",
  "v",
  "v",
  "v",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "w",
  "x",
  "x",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "y",
  "z"
];
